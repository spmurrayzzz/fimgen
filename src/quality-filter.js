export class QualityFilter {
  constructor() {
    this.MIN_CODE_LENGTH = 10;
    this.MAX_CODE_LENGTH = 100000;
    this.MAX_COMMENT_RATIO = 0.5;
    this.MIN_DIFF_CHANGES = 1;
    
    this.generatedPatterns = [
      /Generated by.*/i,
      /AUTO-GENERATED/i,
      /DO NOT EDIT/i,
      /This file is automatically generated/i,
      /autogenerated on/i,
      /<autogenerated\s*\/>/i
    ];
  }

  passesQualityChecks(code, language = 'unknown') {
    try {
      if (!code || code.trim().length < this.MIN_CODE_LENGTH) {
        return false;
      }

      if (code.length > this.MAX_CODE_LENGTH) {
        return false;
      }

      if (code.includes('<<<<<<<') || code.includes('>>>>>>>') || code.includes('=======')) {
        return false;
      }

      if (!this._checkCommentRatio(code, language)) {
        return false;
      }

      for (const pattern of this.generatedPatterns) {
        if (pattern.test(code)) {
          return false;
        }
      }

      if (!this._hasValidSyntaxPatterns(code, language)) {
        return false;
      }

      return true;
    } catch (error) {
      if (process.env.NODE_ENV !== 'test') console.warn('Quality check failed:', error.message);
      return false;
    }
  }

  _checkCommentRatio(code, language) {
    const lines = code.split('\n').filter(line => line.trim());
    
    if (lines.length === 0) {
      return false; // Empty code has no content
    }
    
    const commentPatterns = {
      python: [/^\s*#/, /^\s*"""/],
      javascript: [/^\s*\/\//, /^\s*\/\*/, /^\s*\*/],
      typescript: [/^\s*\/\//, /^\s*\/\*/, /^\s*\*/],
      java: [/^\s*\/\//, /^\s*\/\*/, /^\s*\*/],
      c: [/^\s*\/\//, /^\s*\/\*/, /^\s*\*/],
      cpp: [/^\s*\/\//, /^\s*\/\*/, /^\s*\*/]
    };

    const patterns = commentPatterns[language] || [/^\s*\/\//, /^\s*#/];
    let commentLines = 0;

    for (const line of lines) {
      if (patterns.some(pattern => pattern.test(line))) {
        commentLines++;
      }
    }

    const ratio = commentLines / lines.length;
    return ratio <= this.MAX_COMMENT_RATIO;
  }

  _hasValidSyntaxPatterns(code, language) {
    const openCount = (code.match(/\(/g) || []).length + 
                     (code.match(/\[/g) || []).length + 
                     (code.match(/\{/g) || []).length;
    const closeCount = (code.match(/\)/g) || []).length + 
                      (code.match(/\]/g) || []).length + 
                      (code.match(/\}/g) || []).length;

    if (Math.abs(openCount - closeCount) > 10) {
      return false;
    }

    // Check for basic syntax patterns based on language
    let hasValidPattern = false;
    if (language === 'python') {
      hasValidPattern = /def |class |import |=/.test(code);
    } else if (language === 'javascript' || language === 'typescript') {
      hasValidPattern = /function|const |let |var |=>/.test(code);
    } else {
      hasValidPattern = /[a-zA-Z_]\w*\s*[=\(\[\{]/.test(code);
    }

    // If we have valid patterns but severely unbalanced brackets, reject
    if (hasValidPattern && Math.abs(openCount - closeCount) > 3) {
      return false;
    }

    return hasValidPattern;
  }

  isSemanticChange(diff) {
    if (!diff) return false;

    try {
      const lines = diff.split('\n');
      const added = [];
      const removed = [];

      for (const line of lines) {
        if (line.startsWith('+') && !line.startsWith('+++')) {
          added.push(line.substring(1));
        } else if (line.startsWith('-') && !line.startsWith('---')) {
          removed.push(line.substring(1));
        }
      }

      if (!added.length && !removed.length) {
        return false;
      }

      const addedStripped = added.map(l => l.trim()).filter(Boolean);
      const removedStripped = removed.map(l => l.trim()).filter(Boolean);

      if (JSON.stringify([...addedStripped].sort()) === JSON.stringify([...removedStripped].sort())) {
        return false;
      }

      const addedCode = addedStripped.join('');
      const removedCode = removedStripped.join('');

      if (addedCode.replace(/\s/g, '') === removedCode.replace(/\s/g, '')) {
        return false;
      }

      return true;
    } catch (error) {
      if (process.env.NODE_ENV !== 'test') console.warn('Diff parsing failed:', error.message);
      return false;
    }
  }
}