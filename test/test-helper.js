import { strict as assert } from 'node:assert';

export { assert };

export function createMockEditPair(overrides = {}) {
  return {
    before: 'function old() { return 1; }',
    after: 'function new() { return 2; }',
    diff: '-function old() { return 1; }\n+function new() { return 2; }',
    filepath: 'test.js',
    commitHash: 'abc123',
    commitMessage: 'Update function',
    language: 'javascript',
    contextFiles: [],
    ...overrides
  };
}

export function createMockFIMExample(overrides = {}) {
  return {
    prompt: '<|fim_prefix|>function test() {<|fim_suffix|>}<|fim_middle|>',
    completion: ' return 42; ',
    context: 'function test() { return 42; }',
    format: 'prefix_suffix_middle',
    cursorPosition: 16,
    editableRegion: [16, 30],
    metadata: {
      filepath: 'test.js',
      language: 'javascript'
    },
    ...overrides
  };
}

export function createMockKTOExample(overrides = {}) {
  return {
    prompt: '<|fim_prefix|>function test() {<|fim_suffix|>}<|fim_middle|>',
    completion: ' return 42; ',
    label: true,
    metadata: {
      filepath: 'test.js',
      language: 'javascript'
    },
    ...overrides
  };
}

export const sampleCode = {
  python: `def calculate_sum(numbers):
    """Calculate the sum of a list of numbers."""
    total = 0
    for num in numbers:
        total += num
    return total

def main():
    numbers = [1, 2, 3, 4, 5]
    result = calculate_sum(numbers)
    print(f"Sum: {result}")

if __name__ == "__main__":
    main()`,

  javascript: `function calculateSum(numbers) {
    // Calculate the sum of an array of numbers
    let total = 0;
    for (const num of numbers) {
        total += num;
    }
    return total;
}

function main() {
    const numbers = [1, 2, 3, 4, 5];
    const result = calculateSum(numbers);
    console.log(\`Sum: \${result}\`);
}

main();`,

  java: `public class Calculator {
    public static int calculateSum(int[] numbers) {
        int total = 0;
        for (int num : numbers) {
            total += num;
        }
        return total;
    }
    
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5};
        int result = calculateSum(numbers);
        System.out.println("Sum: " + result);
    }
}`,

  generatedCode: `// AUTO-GENERATED FILE - DO NOT EDIT
// This file is automatically generated by build process

export const CONFIG = {
    version: "1.0.0",
    timestamp: "2024-01-01"
};`,

  mergeConflict: `function test() {
<<<<<<< HEAD
    return "version1";
=======
    return "version2";
>>>>>>> branch
}`,

  tooShort: `x=1`,

  validDiff: `@@ -1,3 +1,3 @@
 function test() {
-    return 1;
+    return 2;
 }`,

  whitespaceDiff: `@@ -1,3 +1,3 @@
 function test() {
-    return 1;
+    return  1;
 }`,

  semanticDiff: `@@ -1,3 +1,3 @@
 function test() {
-    return 1;
+    return calculateValue() * 2;
 }`
};

export function assertThrows(fn, expectedError) {
  let thrown = false;
  let actualError;
  
  try {
    fn();
  } catch (error) {
    thrown = true;
    actualError = error;
  }
  
  assert(thrown, 'Expected function to throw');
  
  if (expectedError) {
    if (typeof expectedError === 'string') {
      assert(actualError.message.includes(expectedError), 
        `Expected error to include "${expectedError}", got "${actualError.message}"`);
    } else if (expectedError instanceof RegExp) {
      assert(expectedError.test(actualError.message),
        `Expected error to match ${expectedError}, got "${actualError.message}"`);
    }
  }
}

export async function assertAsyncThrows(fn, expectedError) {
  let thrown = false;
  let actualError;
  
  try {
    await fn();
  } catch (error) {
    thrown = true;
    actualError = error;
  }
  
  assert(thrown, 'Expected async function to throw');
  
  if (expectedError) {
    if (typeof expectedError === 'string') {
      assert(actualError.message.includes(expectedError), 
        `Expected error to include "${expectedError}", got "${actualError.message}"`);
    } else if (expectedError instanceof RegExp) {
      assert(expectedError.test(actualError.message),
        `Expected error to match ${expectedError}, got "${actualError.message}"`);
    }
  }
}